So what's a locator anyway ?

//La plupart des fonctions prennent directement un chemin.
//Sans compter les 3rd parties.
//On voudrait pouvoir passer directement un chemin à ces fonctions.
//Un truc du genre :

cj_res("foobar")
=> EMSCRIPTEN: file(WGET, "http://www.yoanlecoq.com/cj/foobar");
=> EMSCRIPTEN: file(MEMFS, "foobar");
=> ANDROID:    file("<jnidir>/foobar"); (sdl_rwops)
=> IOS/OS X:   file("<mypath>/foobar");
=> LINUX:      file("<mypath>/foobar");
=> WINDOWS:    file("<mypath>/foobar");

cj_persistent("foobar");
=> EMSCRIPTEN: file(IDB, "db_name", "objstore_name", "foobar");
=> ANDROID:    file("<internal>/<not-jnidir>/foobar"); (sdl_rwops)
=> ANDROID:    file("<external>/foobar"); (sdl_rwops)
=> IOS/OS X:   file("<mypath>/foobar");
=> LINUX:      file("<mypath>/foobar");
=> WINDOWS:    file("<mypath>/foobar");

les fonctions devraient traiter "seulement des fichiers".

--- User-side :
/* Automatically-freed TLS string */
fe_iov_load(iov, cj_locate_res("foo/bar.txt"));
/* Normale */
fe_fpath path;
cj_locate_res(&path, "bar/foo.sav");
fe_iov_load(iov, path);
cj_locate_free(path);


--- Déclaration de l'API :
bool fe_fs_{file|wget|idb}_{load|store|exists|delete}[_sync]([fe_iov *iov,] fe_fpath ps);
Avec :
#ifdef FE_TARGET_EMSCRIPTEN
typedef struct {
    union {
        char *path;
        struct {
            char *url;
        } wget;
        struct {
            char *path;
        } memfs;
        struct {
            char *key;
            char *object_store_name;
            char *db_name;
        } idb;
    };
    enum {
        IDB, WGET, WGET_CACHED_USING_MEMFS, MEMFS
    } type;
} fe_fpath;
#else
typedef struct {
    char *path; /* Directly a filesystem path. No Wget, on purpose. */
} fe_fpath; /* Typedef-ed into a struct to prevent accidental use of raw strings in fe_fs_*() routines. */
#endif

/* These routines are available to build paths. */
#ifdef FE_TARGET_OSX
fe_fpath_osx_sdl2basepath()
fe_fpath_osx_sdl2prefpath(org,app)
fe_fpath_osx_tmp_dir()
#elif defined(FE_TARGET_IOS)
fe_fpath_ios_sdl2basepath()
fe_fpath_ios_sdl2prefpath(org,app)
fe_fpath_ios_tmp_dir(tmpdir) //tmpdir = specifié par app.
#elif defined(FE_TARGET_ANDROID)
fe_fpath_android_internal_storage();
fe_fpath_android_external_storage();
fe_fpath_android_asset(assetdir); //<assetdir> = distinguer de <internal>.
fe_fpath_android_tmp_dir(tmpdir) //tmpdir = spécifié par app.
#elif defined(FE_TARGET_LINUX) || defined(FE_TARGET_FREEBSD)
fe_fpath_linux_executable_dir();
fe_fpath_linux_xdg_data_home();
fe_fpath_linux_tmp_dir();
#elif defined(FE_TARGET_WINRT)
fe_fpath_winrt_installed_location();
fe_fpath_winrt_local_folder();
fe_fpath_winrt_roaming_folder();
fe_fpath_winrt_temp_folder();
#elif defined(FE_TARGET_WINDOWS)
fe_fpath_windows_executable_folder();
fe_fpath_windows_appdata();
fe_fpath_windows_temp_folder();
#endif

API Utilisateur :
void mygame_locate_[res|persistent](fe_fpath *ps, const char *name) {
    /* Apply all transforms on 'ps', using conditional compilation. */
    fe_iov_printf();
}
void mygame_locate_deinit(fe_fpath *ps) {
    fe_mem_heapfree();....
}
Ou un autre moyen plus malin avec du Thread-Local Storage :
On a un pointeur statique sur le dernier chemin utilisé, et il est libéré
au prochain appel.



Last updated : SDL 2.0.4

- Emscripten:
  - MEMFS
    APIs: stdio, MEMFS through EM_ASM
    locator : file-path
    access : read-write
    remarks:
      Use the '--preload-file <asset>' compiler option.
      <asset> can refer to a directory.
  - WGET
    APIs: emscripten_wget_data*()
    locator: url
    access: read-only
    remarks:
      When testing locally, and <url> is relative, prefer using Firefox,
      because some browsers prevent download requests from file:/// protocol.
      This can be asserted by the API and throw an appropriate exception.
      If <url> is relative, make sure your assets are in the page's directory.
      wget() cannot load less than full files.
  - IndexedDB
    APIs: IDBFS through EM_ASM, emscripten_ibd_load*()...
    locator: idb-name, file-path
    size-limit:
      50MB on desktop Firefox
      5MB on mobile Firefox
      10MB on IE 10
      No known limit on Chrome ??
      In all cases, when the app attempts to store more than this limit,
      the browser asks the user for permission to increase the max. size.
    remarks:
      The only guaranteed persistent storage.
      Can only load/store full files at once.
  - SDL_GetBasePath()
      returns: "/"
  - SDL_GetPrefPath()
      locator: organization, app-name, file-path
      returns: "/libsdl/<organization>/<app-name>/"

- iOS: See OS X

- Android:
  - SDL_AndroidGetInternalStoragePath()
    returns: "<absolute-files-dir>/"
    Where <absolute-files-dir> is
        Java : SDLActivity.getContext().getFilesDir().getAbsolutePath();
  - SDL_AndroidGetExternalStoragePath()
    returns: "<absolute-externalfiles-dir>/"
    Where <absolute-externalfiles-dir> is
        Java : SDLActivity.getContext().getExternalFilesDir().getAbsolutePath();
  - SDL_GetBasePath()
      returns: NULL
  - SDL_GetPrefPath()
      locator: organization, app-name, file-path
      returns: "<internal-storage>/"

- WinRT:
  - SDL_WinRTGetFSPathUTF8(SDL_WINRT_PATH_INSTALLED_LOCATION)
  Windows::ApplicationModel::Package::Current->InstalledLocation->Path->Data()
  - SDL_WinRTGetFSPathUTF8(SDL_WINRT_PATH_LOCAL_FOLDER)
  Windows::Storage::ApplicationData::Current->LocalFolder->Path->Data()
  - SDL_WinRTGetFSPathUTF8(SDL_WINRT_PATH_ROAMING_FOLDER)
  Windows::Storage::ApplicationData::Current->RoamingFolder->Path->Data()
  - SDL_WinRTGetFSPathUTF8(SDL_WINRT_PATH_TEMP_FOLDER)
  Windows::Storage::ApplicationData::Current->TemporaryFolder->Path->Data()
  - SDL_GetBasePath()
      returns: "<installed-location>\\"
  - SDL_GetPrefPath()
      locator: organization, app-name, file-path
      returns: "<local-folder>\\<organization>\\<app-name>\\"

- Linux (or FreeBSD and Solaris):
  - SDL_GetBasePath()
      returns: "<absolute-executable-dir>/"
  - SDL_GetPrefPath()
      locator: organization, app-name, file-path
      returns: "<data-home>/<organization>/<app-name>/"
      Where <data-home> is :
        $XDG_DATA_HOME
        otherwise $HOME/.local/share

- OS X:
  - SDL_GetBasePath()
      returns : "<complicated>"
  - SDL_GetPrefPath()
      locator: organization, app-name, file-path
      returns: "<udir>/<organization>/<app-name>"
      Where <udir> is
      NSSearchPathForDirectoriesInDomains(NSApplicationSupportDirectory,       NSUserDomainMask, YES)[0]

- Windows:
  - SDL_GetBasePath()
    returns: "<absolute-executable-dir>\\"
  - SDL_GetPrefPath()
    locator: organization, app-name, file-path
    returns: "<appdata-dir>\\<organization>\\<app-name>"
      Where <appdata-dir> is SHGetFolderPathW(NULL, CSIDL_APPDATA ...);
      MSDN Says : A typical path is
      C:\Documents and Settings\<username>\Application Data

